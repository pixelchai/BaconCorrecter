import os\r\nimport discord\r\nimport logging\r\nimport datetime\r\nimport re\r\n\r\n# regex from https://stackoverflow.com/a/3809435/5013267\r\nRE_URL = r\"(?:http(?:s)?:\\/\\/.)?(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b(?:[-a-zA-Z0-9@:%_\\+.~#?&//=]*)\"\r\n\r\nlogging.basicConfig(level=logging.INFO)\r\n\r\nif \"AUTH_TOKEN\" in os.environ:\r\n    AUTH_TOKEN = os.environ[\"AUTH_TOKEN\"]\r\nelse:\r\n    with open(\"auth.txt\", \"r\") as f:\r\n        AUTH_TOKEN = f.read().strip()\r\n\r\ndef correct(msg):\r\n    \"\"\"\r\n    WARNING: does not sanitise at this stage for comparison purposes\r\n    \"\"\"\r\n    ret = \"\"\r\n    for word in re.split(r\"(\" + RE_URL + r\"|.+?\\b)\", msg):\r\n        if word is None:\r\n            continue\r\n\r\n        if len(word.strip()) > 2:\r\n            if all((\r\n                not word.isupper(),\r\n                not re.fullmatch(RE_URL, word),\r\n                not (word[-1] in ['s', 'z'] and word[:-1].isupper()),\r\n                not (sum([c.isupper() for c in word[1:]])==1)\r\n            )):\r\n                word = word[0] + word[1:].lower()\r\n        ret += word\r\n    return ret\r\n\r\ndef sanitise(msg):\r\n    # surround @ characters with ZWSP for safety\r\n    return msg.replace(\"@\", \"\\u200b@\\u200b\")\r\n\r\ndef quote_text(msg):\r\n    txt = \"\"\r\n    for line in msg.splitlines(keepends=True):\r\n        txt += \"> \" + sanitise(line)\r\n    return txt\r\n\r\nclass BotClient(discord.Client):\r\n    async def login(self, *args, **kwargs):\r\n        await super().login(AUTH_TOKEN, bot=True)\r\n\r\n    async def on_ready(self):\r\n        logging.info(\"Logged in as {}\".format(self.user.name))\r\n\r\n        await self.change_presence(activity=discord.Game(\"git.io/JtZ5T\"))\r\n        logging.info(\"Changed presence\")\r\n\r\n    async def on_message(self, message):\r\n        if message.author == client.user:\r\n            return\r\n\r\n        if message.author.bot:\r\n            return\r\n\r\n        # if message.author.id != \"REDACTED\": return\r\n\r\n        logging.info(\"{}: Message: {}\".format(datetime.datetime.utcnow().strftime(\"%Y-%m-%d %H:%M\"), message.content))\r\n\r\n        corrected_msg = correct(message.content)\r\n        if message.content != corrected_msg:\r\n            txt = \"\"\r\n            txt += message.author.mention + \"\\n\"\r\n            txt += quote_text(message.content)\r\n\r\n            txt += \"\\n\\nCorrected:\\n\"\r\n            txt += quote_text(corrected_msg)\r\n\r\n            await message.channel.send(txt)\r\n            logging.info(\"corrected\")\r\n        else:\r\n            logging.info(\"no correcting needed\")\r\n\r\nif __name__ == '__main__':\r\n    client = BotClient()\r\n    client.run()\r\n